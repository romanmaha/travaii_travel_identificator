// hooks/usePaywall.ts
import { useState } from "react";
// üëá –ü–æ—Ç—Ä—ñ–±–µ–Ω –æ—Å–Ω–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è customerInfo
import Purchases, { CustomerInfo } from "react-native-purchases";
import PurchasesUI from "react-native-purchases-ui";

interface PresentPaywallOptions {
  onSuccess?: (customerInfo: CustomerInfo) => void;
  onDismiss?: () => void;
}

export const usePaywall = () => {
  const [isLoading, setIsLoading] = useState(false);
  // ‚ùóÔ∏è –í–∏–¥–∞–ª—è—î–º–æ useRouter –∑–≤—ñ–¥—Å–∏, —Ö—É–∫ –±—ñ–ª—å—à–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é

  const presentPaywall = async (options?: PresentPaywallOptions) => {
    setIsLoading(true);
    try {
      const result = await PurchasesUI.presentPaywallIfNeeded({
        requiredEntitlementIdentifier: "premium",
      });

      if (
        result === PurchasesUI.PAYWALL_RESULT.PURCHASED ||
        result === PurchasesUI.PAYWALL_RESULT.RESTORED
      ) {
        const customerInfo = await Purchases.getCustomerInfo();
        console.log("–ü–æ–∫—É–ø–∫–∞ –∞–±–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!");

        // –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∫–æ–ª–±–µ–∫ onSuccess
        options?.onSuccess?.(customerInfo);
      } else if (result === PurchasesUI.PAYWALL_RESULT.CANCELLED) {
        console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ –µ–∫—Ä–∞–Ω –ø–æ–∫—É–ø–æ–∫.");

        // –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∫–æ–ª–±–µ–∫ onDismiss
        options?.onDismiss?.();
      }
    } catch (error) {
      console.error("Paywall presentation error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return { presentPaywall, isLoading };
};
